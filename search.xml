<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Github Action + CloudBase Test</title>
      <link href="/CI-test/"/>
      <url>/CI-test/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/TencentCloudBase/cloudbase-action" target="_blank" rel="noopener">references: </a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>田间大棚环境参数检测系统</title>
      <link href="/stm32-filed-decetion/"/>
      <url>/stm32-filed-decetion/</url>
      <content type="html"><![CDATA[<h3 id="一、项目要求"><a href="#一、项目要求" class="headerlink" title="一、项目要求"></a>一、项目要求</h3><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/stm32-filed-decetion/subject-requirements.png" alt="项目要求"></p><h3 id="二、方案设计"><a href="#二、方案设计" class="headerlink" title="二、方案设计"></a>二、方案设计</h3><p>咕咕咕，等闲下来<del>应该</del><strong>一定</strong>会补（呜呜呜</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>我拿树莓派做了什么</title>
      <link href="/raspberry-2/"/>
      <url>/raspberry-2/</url>
      <content type="html"><![CDATA[<p>入手树莓派一年整一年了，那么我拿树莓派做了些什么呢？<del>吃灰</del></p><h3 id="一、开机自动发送内网IP至邮箱"><a href="#一、开机自动发送内网IP至邮箱" class="headerlink" title="一、开机自动发送内网IP至邮箱"></a>一、开机自动发送内网IP至邮箱</h3><p>这一内容有些偏题，但确是后面内容的基础，所以便写了。</p><p>其实实现方案很简单，开机自启→检查网络连通性→获取内网ip地址→发送至指定邮箱。</p><p>『1』先从发送邮件开始</p><p>我们使用 <code>mutt</code>和 <code>msmtp</code> 来做这些工作。</p><pre><code class="bash">sudo apt install msmtp mutt</code></pre><p>在 <code>/root</code> 目录下创建 <code>.msmtprc</code> 文件：</p><pre><code class="json">account defaulthost smtp.xxx.comfrom xxx@xxx.comauth plainuser xxx@xxx.compassword xxxlogfile /root/msmtp.log</code></pre><ul><li>一定注意，是在 <code>/root</code> 下建立配置文件，因为开机启动时脚本的执行用户是root</li><li>提前创建好log文件，否则会有错误发生 <code>msmtp: cannot log to /root/.log/msmtp.log: cannot open: 没有那个文件或目录</code></li><li>163邮箱需要使用客户端授权码登录</li></ul><p>接下来配置 <code>mutt</code>，同理创建 <code>.muttrc</code> 文件：</p><pre><code class="json">set crypt_use_gpgme = noset sendmail=&quot;/usr/bin/msmtp&quot;set use_from=yesset realname=&quot;Raspberry&quot;set editor=&quot;vim&quot;</code></pre><p>一切配置OK，我们来做一个测试</p><pre><code class="bash">echo &quot;null&quot; | mutt -s &quot;hello&quot; xxx@xxx.com</code></pre><p>很快，我收到了来自树莓派的问候。</p><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/raspberry-2/1.png" alt></p><p>『2』获取内网IP</p><p>很意外的，从 <code>/etc/rc.local</code> 文件中发现了这样一段话：</p><pre><code class="bash"># Print the IP address_IP=$(hostname -I) || trueif [ &quot;$_IP&quot; ]; then  printf &quot;My IP address is %s\n&quot; &quot;$_IP&quot;fi</code></pre><p>不妨来试一下 <code>hostname -I</code></p><pre><code class="bash">$ hostname -I192.168.1.171 192.168.1.178</code></pre><p>一个是我的有线IP，另一个是无线IP</p><p>但我并没有用这种方法，选择了 <code>ifconfig</code> 命令：</p><pre><code class="bash">$ ifconfig eth0 | sed -n &quot;2,2p&quot; | awk &#39;{print substr($2,1)}&#39;192.168.1.171$ ifconfig wlan0 | sed -n &quot;2,2p&quot; | awk &#39;{print substr($2,1)}&#39;192.168.1.178</code></pre><p>『3』脚本实现</p><pre><code class="bash">#!/bin/bash# network checkingwhile truedo  sleep 5s  ping -c 1 baidu.com &gt; /dev/null 2&gt;&amp;1  if [ $? -eq 0 ]  then    echo &quot;Network OK, send email...&quot;    break  else    echo &quot;Network not ready, wait...&quot;  fidone# get the IP addressETH0_IP_ADDR=`ifconfig eth0 | sed -n &quot;2,2p&quot; | awk &#39;{print substr($2,1)}&#39;`WLAN0_IP_ADDR=`ifconfig wlan0 | sed -n &quot;2,2p&quot; | awk &#39;{print substr($2,1)}&#39;`# send the Emailecho &quot;Current time: `date &#39;+%F %T&#39;`.Enjoy!&quot; | mutt -s &quot;IP Address of Raspberry: (ETH0)$ETH0_IP_ADDR (WLAN0)$WLAN0_IP_ADDR &quot; xxx@xxx.com</code></pre><p>『4』开机自启</p><p>向 <code>/etc/rc.local</code> 文件中加入 <code>sh /root/WhatIsMyIp.sh &gt;&gt; /root/WhatIsMyIp.log 2&gt;&amp;1</code> 即可。</p><p>重启测试。</p><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/raspberry-2/2.png" alt></p><h3 id="二、Transmission下载机"><a href="#二、Transmission下载机" class="headerlink" title="二、Transmission下载机"></a>二、Transmission下载机</h3><p>参考自 <a href="https://wiki.archlinux.org/index.php/Transmission" target="_blank" rel="noopener">ArchWiki</a></p><p>『1』Transmission安装及配置</p><p>安装cli和进程守护程序：<code>sudo apt install transmission-cli transmission-daemon</code></p><p>设置web界面：</p><pre><code class="bash">transmission-daemon -t -u arch -v linux -p 9091 -a &quot;127.0.0.1&quot;</code></pre><p>之后便可以通过 <code>http://树莓派ip:9091</code> 访问web界面。</p><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/raspberry-2/3.png" alt></p><ul><li>修改配置文件 <code>~/.config/transmission-daemon/settings.json</code> 后，需要使用 <code>killall -HUP transmission-daemon</code> 应用配置。</li><li>如果想用一个文本编辑器手动编辑配置文件，请先停止守护程序；否则当它停止时将会覆盖配置文件。</li></ul><p>『2』搭建SMB</p><p>为了方便用电脑或者手机直接看树莓派中的视频，搭建了samba。</p><p>首先安装：</p><pre><code class="bash">sudo apt install samba samba-common-bin</code></pre><p>修改 <code>/etc/samba/smb.conf</code> 配置文件，在文件末尾添加：</p><pre><code class="bash">[public]   comment = public storage   path = /home/pi/public   valid users = pi   read only = no   create mask = 0777   directory mask = 0777   guest ok = no   browseable = yes</code></pre><p><code>valid users</code>，即 pi 为有效用户，将其添加到 Samba 中：</p><pre><code class="bash">sudo smbpasswd -a pi</code></pre><p>创建密码后，重启 samba 使配置生效：</p><pre><code class="bash">sudo samba restart</code></pre><p>最后设置权限：</p><pre><code class="bash">sudo chmod -R 777 ~/public</code></pre><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/raspberry-2/6.png" alt></p><h3 id="三、UnblockNeteaseMusic"><a href="#三、UnblockNeteaseMusic" class="headerlink" title="三、UnblockNeteaseMusic"></a>三、UnblockNeteaseMusic</h3><p>解锁网易云音乐客户端变灰歌曲，项目来自 <a href="https://github.com/nondanee/UnblockNeteaseMusic" target="_blank" rel="noopener">UnblockNeteaseMusic</a></p><pre><code class="bash">git clone https://github.com/nondanee/UnblockNeteaseMusic.gitcd ~/UnblockNeteaseMusicnohup node app.js -p 65535 -f 59.111.181.35 &gt; proxy.log 2&gt;&amp;1 &amp;</code></pre><p>但是退出shell时，进程就会被kill掉，查了一下我们可以使用 <code>screen</code> 命令来守护进程。</p><p>首先新建一个名为music的screen：</p><pre><code class="bash">screen -S music</code></pre><p>然后运行该项目，按下 <code>Ctrl A</code>，然后按 <code>D</code>，终端上方出现 <code>[detached from 2023.music]</code>，即挂起。</p><ul><li><p>其他常用命令：</p><ol><li><p>列出所有Screen</p><pre><code class="bash">$ screen -lsThere is a screen on:        1863.music      (2019年05月19日 12时59分49秒)   (Detached)1 Socket in /run/screen/S-pi.</code></pre></li><li><p>杀掉某个Screen</p><pre><code class="bash">$ screen -X -S 1863 quit</code></pre></li></ol></li></ul><p>搭建成功后，在客户端中设置代理</p><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/raspberry-2/4.png" alt></p><p>点击确定，重启后看一下效果</p><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/raspberry-2/5.png" alt></p><hr><p>暂时就只有这些了。有时间更。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>重庆大学路由器配置drcom</title>
      <link href="/router_drcom/"/>
      <url>/router_drcom/</url>
      <content type="html"><![CDATA[<p>2019.09.14更新</p><p><del>2018.11.13更新</del></p><p>下面的全都不需要了，一键脚本弄好了。只要你有一个 <del><a href="http://downloads.openwrt.org.cn/PandoraBox/" target="_blank" rel="noopener">Pandora Box</a></del>（正在准备去除Pandora支持）<a href="https://openwrt.org/" target="_blank" rel="noopener">OpenWrt</a>，剩下的脚本解决。</p><p>甩链接 <a href="https://github.com/purefkh/CQU_drcom" target="_blank" rel="noopener">https://github.com/purefkh/CQU_drcom</a></p><hr><p>众所周知，我们学校使用的 drcom 是不允许使用路由器或者热点分享的。</p><p>但是，在<del>世界最大的同性交友平台</del> github上早就有大佬给出了drcom路由器的设置方法 。</p><p>有意愿使用路由器的小伙伴可以参照 <a href="https://github.com/drcoms/drcom-generic/wiki/d%E7%89%88%E7%AE%80%E7%95%A5%E4%BD%BF%E7%94%A8%E5%92%8C%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">d版简略使用和配置说明</a> 进行配置，针对比较懒的同学，我这里放出已经配置好的脚本，你只要 <strong>修改其中的账号密码</strong>，便然后直接从文章中 <code>如果PC上运行成功，则修改 IS_TEST = True 为 IS_TEST = False</code> 部分开始操作就可以了。</p><p>这里是链接 <a href="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/router_drcom/latest-wired_ab.py" target="_blank" rel="noopener">AB区配置脚本</a>、<a href="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/router_drcom/latest-wired_d.py" target="_blank" rel="noopener">虎溪校区配置脚本</a>。</p><p>但是最近我的路由器又经常会莫名其妙地断网，每次都要ssh到路由器，手动重启 drcom 服务。所以想了个办法，每两分钟检查一次网络连接，网若安好，便是晴天；网若不好，重启 drcom。</p><p>直接放具体操作。</p><p>先弄了一个shell脚本，命名为 <code>networkChecking.sh</code>：</p><pre><code class="bash">#! /usr/bin/sh# /usr/bin/networkChecking.sh# 检查日志文件log=~/networkChecking.logif [ ! -f ${log} ]then    touch ${log}fidr_log=~/drcom.logif [ ! -f ${dr_log} ]then    touch ${dr_log}fi# 检查网络连接ping -c 1 baidu.com &gt; /dev/null 2&gt;&amp;1if [ $? -eq 0 ]then    echo `date`  &quot;......OK......&quot; &gt;&gt; ${log}else    echo `date` &quot;......Failed......&quot; &gt;&gt; ${log}    # 如果drcom登录超时，重启路由器    ps | grep &quot;timeout, retrying&quot; ~/drcom.log | grep -v grep    if [ $? -eq 0 ]    then        echo $NULL &gt; ~/drcom.log        echo `date` &quot;......timeout......&quot; &gt;&gt; ${log}        reboot    fi    # 若已存在drcom进程，杀掉；没有则直接重启drcom    ps | grep drcom | grep -v grep    if [ $? -ne 0 ]    then        echo &quot;......start drcom......&quot; &gt;&gt; ${log}    else        echo &quot;......drcom is running, kill......&quot; &gt;&gt; ${log}        echo &quot;......start drcom......&quot; &gt;&gt; ${log}        kill -9 $(pidof python /usr/bin/drcom)    fi    python /usr/bin/drcom &gt; ${dr_log} &amp;fi</code></pre><p>这个脚本的作用就是 ping 百度来判断网络的连接状态，当 ping 不通的时候就重启 drcom。</p><hr><p>2018.10.22更新</p><ul><li>脚本逻辑优化，修复由于 drcom 进程已经存在产生的端口占用问题</li></ul><p>2018.10.24更新</p><ul><li>修复偶尔出现的脚本无法登录的问题（目前只想到了重启路由器）—— 判断则是通过抓取 drcom 的运行日志，一旦 <code>timeout</code> 便重启，因此可能需要修改自启命令为 <code>python /usr/bin/drcom &gt; ~/drcom.log &amp;</code></li><li>修复了无法杀掉 drcom 进程的致命错误</li></ul><hr><p>测试完成，将其放在 <code>/usr/bin/</code> 下。</p><p>测试通过后，就该解决定时运行的问题了。这里通过 <strong>crontab</strong> 来实现定时操作。</p><p><code>crontab -e</code>，编辑crontab文件：</p><pre><code class="bash">*/1 * * * * sh /usr/bin/networkChecking.sh</code></pre><p>即即每分钟一次，执行 <code>sh /usr/bin/networkChecking.sh</code> 命令检查网络连接。</p><p>为防止日志文件积累过多，我们可以每天清理一次日志文件：</p><pre><code class="bash">36 6 * * * echo $NULL &gt; ~/networkChecking.log</code></pre><p>完成后，执行 <code>/etc/init.d/cron restart</code> 重启crontab服务即可。</p><p>匆忙赶制，如有纰漏请多多谅解，并联系我。</p><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/router_drcom/emmm.gif" alt></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Gradle的代理问题</title>
      <link href="/gradle_proxy/"/>
      <url>/gradle_proxy/</url>
      <content type="html"><![CDATA[<p>暑假前凭 <strong>一腔热血</strong> 报了 <code>Java及手机app开发</code> 这门课。谁知 <strong>××教务</strong> 却不认这门课的学分。便又是凭着 <strong>一腔热血</strong> 没有退课。</p><p>暑假在家就一直困扰于 gradle 的网络连接问题。由于一些众所周知的原因，Android 开发对国内的网络环境实在是不算友好。</p><p>最开始的时候通过 <code>proxychains</code> 来启动 Android Studio，还是可以编译的，但是在连接虚拟机的时候又会出现端口占用的问题。只能重新启动 AS，很是不便。</p><p>也找了一些个解决方法，但是由于基本没有 Android 知识，一直不知道该如何去执行。</p><p>这些天也开始了 Android 的学习，渐渐对基本文件有了一丁点的了解，也就顺便解决了 Gradle 的网络连接问题。</p><p><strong>先要从 AS 项目中文件的作用说起</strong>。</p><p>当你新建一个项目时，AS 会 <strong>默认使用</strong> Android 模式的项目结构，这种结构看起来更简洁，但是由于 <strong>不是真实结构</strong>，可能会让人摸不着头脑，建议先在左上角切换至 Project 视图，更适合我这种小白使用。</p><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/gradle_proxy/2.png" alt></p><p>由于这篇文章只用来记录 gradle 代理的设置，所以各个文件并不一一介绍。</p><p>可以看到，在 <code>gradle/</code> 下以及 <code>app/src/</code> 下分别有一个 <strong>build.gradle</strong> 文件。这便分别是 <strong>项目全局的 gradle 构建脚本</strong> 及 <strong>app 模块的 gradle 构建脚本</strong>。</p><p>便看 gradle 全局构建脚本。</p><pre><code class="gradle">buildscript {        repositories {        google()        jcenter()    }    dependencies {        classpath &#39;com.android.tools.build:gradle:3.1.4&#39;    }}allprojects {    repositories {        google()        jcenter()    }}task clean(type: Delete) {    delete rootProject.buildDir}</code></pre><p>文件中的两处 <strong>repositories</strong> 都声明了 <strong>jcenter()</strong> 配置，而 jcenter 就是 Android 开源项目的一个代码托管仓库。相似的，<strong>google()</strong> 是一个依赖仓库，由于种种原因，我们想要稳定的连接这个仓库并不容易。</p><p>这样讲的话此处就有两个解决方案</p><ol><li><p>通过合适的方式进行全局代理（由于个人水平有限，我在Linux下实在没有找到完美的方法，此处便不作介绍）</p></li><li><p>通过国内的镜像站（此处使用了阿里的镜像站）</p><p>通过上文对 <code>build.gradle</code> 文件中 <strong>仓库配置</strong> 的简单描述，现在来看只要有了镜像站，修改起来并不是什么难事。只须将 <code>google() jcenter()</code> 注释掉，并添加镜像地址即可。</p><p>示例如下</p><pre><code class="gradle">buildscript {    repositories {//        google()//        jcenter()        maven { url &#39;https://plugins.gradle.org/m2/&#39; }        maven { url &#39;http://maven.aliyun.com/nexus/content/repositories/google&#39; }        maven { url &#39;http://maven.aliyun.com/nexus/content/groups/public/&#39; }        maven { url &#39;http://maven.aliyun.com/nexus/content/repositories/jcenter&#39;}    }    dependencies {        classpath &#39;com.android.tools.build:gradle:3.1.4&#39;    }}allprojects {    repositories {//        google()//        jcenter()        maven { url &#39;https://plugins.gradle.org/m2/&#39; }        maven { url &#39;http://maven.aliyun.com/nexus/content/repositories/google&#39; }        maven { url &#39;http://maven.aliyun.com/nexus/content/groups/public/&#39; }        maven { url &#39;http://maven.aliyun.com/nexus/content/repositories/jcenter&#39;}    }}task clean(type: Delete) {    delete rootProject.buildDir}</code></pre><p>至此，gradle 的依赖问题 <strong>完美解决</strong>。</p></li></ol><p>   <em>本文参考 <a href="https://www.jianshu.com/p/ab1f5e5f5f5c" target="_blank" rel="noopener">完美解决gradle依赖库导致build慢的问题</a></em></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>迟来的七夕快乐</title>
      <link href="/happy_qixi/"/>
      <url>/happy_qixi/</url>
      <content type="html"><![CDATA[<p>最近一直想发一篇博文，但又无从下笔。</p><p>那便趁七夕，水一文。</p><p>其实有两件事。</p><p><strong>第一</strong>，孙哲平生快哈哈哈O(∩_∩)O</p><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/qixi/szp.jpg" alt="孙哲平"></p><p><strong>第二</strong>便是迟到的祝福，祝愿天下有情人终成眷属，没对象的早日脱单<br>下面是一个 <code>临场添加</code> 的祝福页面</p><p><a href="https://purefkh.xyz/qixi">七夕快乐 https://purefkh.xyz/qixi</a></p><p>页面来自 <a href="https://github.com/18801790654" target="_blank" rel="noopener">18801790654大佬</a> 的 <a href="https://github.com/18801790654/HTML5-CSS3-JavaScript" target="_blank" rel="noopener">开源项目</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>电赛培训之示波器</title>
      <link href="/oscilloscope/"/>
      <url>/oscilloscope/</url>
      <content type="html"><![CDATA[<p>2019.04.26更新</p><p>咕咕咕</p><hr><p>这个暑假<del>不回家</del>，参加了电子设计大赛。</p><p>今天正式开始培训，老师布置的任务让我们这些大一菜鸡颇为头痛。。。</p><p>甩一个<a href="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/oscilloscope/%E7%A4%BA%E6%B3%A2%E5%99%A8%E9%A2%98%E7%9B%AE.pdf" target="_blank" rel="noopener">题目要求链接</a><br><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/oscilloscope/oscilloscope1.png" alt="题目要求"></p><p>待填坑(<strong>鸽了也说不定呢</strong>)</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>关于谭浩强教授</title>
      <link href="/tanhq/"/>
      <url>/tanhq/</url>
      <content type="html"><![CDATA[<p>经常在各种地方看到 <code>void main()</code> 以及 <code>main()</code>，所以特地查了一些资料来说明这是不好的。</p><p><strong>首先引一段 <code>C Primer Plus</code> 中的话</strong></p><blockquote><p>如果浏览旧式的C代码，会发现程序以如下形式开始：<br>main()<br>C90 标准勉强接受这种形式，但是 C99 和 C11 标准不允许这样写。因此，即使你使用的编译器允许，也不要这样写。<br>你还会看到下面这种形式：<br>void main()<br>一些编译器允许这样写，但是所有的标准都未必认可这种写法。因此，编译器不必接受这种形式，而且许多编译器都不能这么写。</p></blockquote><p><strong>下面说一下我查到的</strong></p><pre><code>void main()</code></pre><p>首先，从标准角度(所有版本)来说，void main()肯定是错的，没有任何标准(C89/99/11以及C++98/03/11/14)中允许过这种写法。<br>void main()的写法可能是从嵌入式来的……没有操作系统，入口点是硬件实现，返回任何东西都没意义。</p><pre><code>main()</code></pre><p>在C89里，函数没有显式声明返回类型，则默认是int,但是这种方式在C99之后就被废除掉了。</p><p>又查了一下谭浩强教授的履历，<code>wikipedia</code> 上指出：</p><blockquote><p>谭浩强，1958年清华大学自动控制系毕业。</p></blockquote><p>自动化，看看 <code>百度百科</code> 是怎么说的：</p><blockquote><p>专业有两个发展方向，第一个是工业过程控制方向，第二个是嵌入式系统方向。</p></blockquote><p>结合来看，接触单片机比较多的谭教授在教材里反复使用 <code>void main</code> 也就不足为怪了吧。</p><p><strong>在C99/11标准中</strong>，明确定义了对于标准的main函数的两个原型：</p><pre><code>int main(void)</code></pre><p>以及</p><pre><code>int main(int argc, char *argv[])</code></pre><p>建议大家都能使用标准形式，这样把程序从一个编译器移至另一个编译器是会方便很多。</p><p><strong>但是，仅从次就片面的否定谭老爷子的贡献是完全不可取的。</strong></p><p>在<a href="https://www.zhihu.com/question/22793863/answer/23090714" target="_blank" rel="noopener">知乎</a>上看到了这样的描述：</p><blockquote><p>象牙塔和各类计算机等级考试中乐此不疲的“(++i) + (++i) + (++i)”问题。</p></blockquote><blockquote><p>很多程序员将这种病态、晦涩的编码方式归咎于谭浩强版的《C 程序设计》，认为谭老爷子是这种学究代码的始作俑者。<br>我后来饶有兴致地考证了一番，发现谭老爷子在《C 程序设计》（第二版）的第 58～59 页中对这种情况进行了讨论，并指出以下几点：</p></blockquote><blockquote><p>1.应该避免++/–的副作用可能产生的歧义性，建议将这样的表达式拆开写。<br>2.对于 i+++j 的情况，应使用括号来使代码明晰以避免误解，如 (i++)+j 或 i+(++j)。<br>3.总之，不要写出别人看不懂的、也不知道系统会怎样执行的程序。</p></blockquote><blockquote><p>窃为谭老爷子鸣不平啊。</p></blockquote><p>最后，引别人的一句话来结束这篇水文：</p><blockquote><p>他在我看来，是先驱，是开拓者，是伟人。<br>人类哪有不犯错的？所以，书中的错误不能掩盖谭老先生的光辉。</p></blockquote><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/tanhq/tanhq.gif" alt="此图无任何恶意，仅是调侃之意"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>树莓派之从吃土到吃灰</title>
      <link href="/raspberry-1/"/>
      <url>/raspberry-1/</url>
      <content type="html"><![CDATA[<p>最近刚刚入手了树莓派3B，介绍一下树莓派入手教程。<br>虽然网上有很多类似教程，还是简单的总结一下。</p><h3 id="一、烧写镜像"><a href="#一、烧写镜像" class="headerlink" title="一、烧写镜像"></a>一、烧写镜像</h3><p>现在树莓派已经有很多系统可以用了，像 <a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">Raspbian</a>、 <a href="https://ubuntu-mate.org/raspberry-pi/" target="_blank" rel="noopener">Ubuntu MATE</a>、 <a href="https://docs.microsoft.com/en-us/windows/iot-core/getstarted" target="_blank" rel="noopener">Windows 10 IoT Core</a>，但我个人还是推荐（或者说我个人更习惯于）Raspbian。所以下面的教程都是基于Raspbian。</p><p>推荐使用 <a href="https://etcher.io/" target="_blank" rel="noopener">Etcher</a> 进行刻录，理由：全平台。</p><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/raspberry-1/1.png" alt="Etcher"></p><h3 id="二、使用SSH进行连接"><a href="#二、使用SSH进行连接" class="headerlink" title="二、使用SSH进行连接"></a>二、使用SSH进行连接</h3><p>Raspbian默认是把SSH关闭的，所以需要手动在 <code>/boot</code> 新建一个ssh文件，<strong>一定注意，是ssh而不是ssh.txt</strong></p><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/raspberry-1/2.png" alt="一定注意，是ssh而不是ssh.txt"></p><p>这时候，如果你有<strong>路由器</strong>，可以直接拿一根网线查到树莓派上，插卡，开机</p><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/raspberry-1/3.png" alt="如图，raspberrypi就是我的树莓派啦"></p><p>如果你没有路由器，在内存卡 <code>/boot</code> 下新建wpa_supplicant.conf文件，内容如下</p><pre><code>country=GBctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdevupdate_config=1network={  ssid=&quot;你的Wi-Fi(1)&quot;  psk=&quot;你的Wi-Fi(1)密码&quot;  priority=优先级，数字越大优先级越高}network={  ssid=&quot;你的Wi-Fi(2)&quot;  psk=&quot;你的Wi-Fi(2)密码&quot;  priority=优先级，数字越大优先级越高}</code></pre><hr><p>最近(2018.05.25)看到消息说对新的系统以上操作无效</p><p>可以尝试以下方式</p><p><code>sudo nano /etc/network/interfaces</code>，当然没有路由器的话就是直接在 <code>/boot</code> 新建 <code>interfaces</code> 文件，添加如下内容，然后重启</p><pre><code>auto wlan0iface wlan0 inet dhcpwpa_conf /etc/wpa_supplicant/wpa_supplicant.conf</code></pre><p>然后就该插卡开机了</p><p>接着进行SSH连接</p><p>如果你有<strong>路由器</strong>，进入路由器后台，查看树莓派的内网IP地址</p><p>如果没有路由器的话</p><p><strong>Windows</strong></p><p>cmd中使用ipconfig命令得到IP段</p><p>再用 <a href="https://pan.baidu.com/s/1F_U1_E3ac5kosCe9ZBdypg" target="_blank" rel="noopener">局域网IP扫描工具</a> 来得到你的树莓派IP（没有图，懒着开机^_^）</p><p><strong>Linux</strong>（或者Android手机可以使用 <a href="https://www.coolapk.com/apk/com.termux" target="_blank" rel="noopener">Termux</a> 等工具）</p><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/raspberry-1/4.png" alt="这里该有图片"></p><pre><code>$ cat /proc/net/arp</code></pre><p>如图，我应该扫描192.168.1.***IP段</p><pre><code>$ sudo nmap -sP 192.168.1.0/24</code></pre><p>现在已经得到了pi的IP，Windows使用putty（推荐他，是因为他免费），Linux自然是openssh喽。</p><h3 id="三、换源"><a href="#三、换源" class="headerlink" title="三、换源"></a>三、换源</h3><p>接下来的第一件事应该就是换源了吧</p><pre><code>$ sudo apt-get install nano$ sudo nano /etc/apt/sources.list</code></pre><p>将自带的源用 # 注释掉，加入国内的源</p><h5 id="清华大学开源软件镜像站"><a href="#清华大学开源软件镜像站" class="headerlink" title="清华大学开源软件镜像站"></a><a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华大学开源软件镜像站</a></h5><pre><code>deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main non-free contribdeb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main non-free contrib</code></pre><h5 id="中国科学技术大学开源镜像站"><a href="#中国科学技术大学开源镜像站" class="headerlink" title="中国科学技术大学开源镜像站"></a><a href="http://mirrors.ustc.edu.cn" target="_blank" rel="noopener">中国科学技术大学开源镜像站</a></h5><pre><code>deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main non-free contribdeb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main non-free contrib</code></pre><p>然后执行 <code>sudo apt-get update</code></p><h3 id="四、开启VNC及安装Teamviewer"><a href="#四、开启VNC及安装Teamviewer" class="headerlink" title="四、开启VNC及安装Teamviewer"></a>四、开启VNC及安装Teamviewer</h3><h4 id="1、VNC"><a href="#1、VNC" class="headerlink" title="1、VNC"></a>1、VNC</h4><blockquote><p>VNC（Virtual Network Computing），为一种使用RFB协议的显示屏画面分享及远程操作软件。此软件借由网络，可发送键盘与鼠标的动作及即时的显示屏画面。    ————摘自wikipedia</p></blockquote><p>首先ssh连接你的pi</p><pre><code>$ sudo raspi-config</code></pre><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/raspberry-1/5.png" alt="如图"></p><p>选择 <code>5 Interfacing Options</code> - <code>P3 VNC</code> 设置为 enable，然后通过VNC软件来连接就好了，如果遇到显示不全的问题，可以根据下面的教程来调整树莓派的分辨率</p><pre><code>$ sudo raspi-config</code></pre><p><code>7 Advanced Options</code> - <code>A5 Resolution</code> 选择合适的分辨率即可</p><h4 id="2、Teamviewer"><a href="#2、Teamviewer" class="headerlink" title="2、Teamviewer"></a>2、Teamviewer</h4><p>安装 <a href="https://www.teamviewer.com/zhcn/download/linux/" target="_blank" rel="noopener">Teamviewer</a>,选择 <code>armv7 32bit</code> 版，当然，此时你就有几种方法来将.deb包下载到你的树莓派上了</p><p>你可以选择上面提到的VNC来连接，使用图形化界面，通过浏览器下载，<br>也可以以wget方式，<br>或者使用 <a href="https://filezilla-project.org/" target="_blank" rel="noopener">FileZilla</a> 通过ftp上传到pi（这又是一个全平台）。</p><p>现在认为你已经下载成功</p><pre><code>$ sudo dpkg -i teamviewer-host***.deb</code></pre><p>其中***代表你的版本号</p><p>当然你可能会遇到错误，缺少各种各样的依赖，可以执行 <code>sudo apt-get --fix-broken install</code> 来解决依赖问题，也有可能解决不了，需要手动下载依赖……</p><p>比如在安装teamviewer的时候我就遇到了……查了一些，可以通过 <abbr title="GDebi can install local .deb packages with automatic dependency resolution (it automatically downloads and installs the required packages)."><code>GDebi</code> </abbr>来解决</p><pre><code>$ sudo apt-get install gdebi$ sudo apt-get gdebi teamviewer-host***.deb</code></pre><p>安装成功后，可以通过 <code>teamviewer info</code> 查看本机信息， <code>teamviewer passwd 密码</code> 设置你的密码， <code>teamviewer gui</code> 启动图形化界面。</p><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/raspberry-1/6.png" alt="成果"></p><p>这些应该就是树莓派入门的基本操作了。（我暂时只能想到这么多）</p><hr><p>2018年5月20日。来自<strong>单身狗</strong>的愤怒更新</p><h3 id="五、安装中文输入法"><a href="#五、安装中文输入法" class="headerlink" title="五、安装中文输入法"></a>五、安装中文输入法</h3><h4 id="1、配置中文环境"><a href="#1、配置中文环境" class="headerlink" title="1、配置中文环境"></a>1、配置中文环境</h4><p>raspbian 默认是全英文的，如果觉得不习惯，可以将其设置为中文</p><pre><code>$ sudo raspi-config</code></pre><p><code>4 Localisation Options</code> - <code>I1 Change Locale</code></p><p>通过<strong>空格</strong>选中 <code>zh_CN.UTF-8 UTF-8</code>，<code>回车</code> 确定，在下一个界面中再次选中 <code>zh_CN.UTF-8 UTF-8</code>即可</p><p><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/raspberry-1/7.png" alt="如图"></p><h4 id="2、安装中文输入法"><a href="#2、安装中文输入法" class="headerlink" title="2、安装中文输入法"></a>2、安装中文输入法</h4><p>只需要执行 <code>sudo apt-get install scim-pinyin</code>，然后执行 <code>scim</code> 激活输入法就O<del>文明</del>K了。5</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/helloworld/"/>
      <url>/helloworld/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <link href="//404.html"/>
      <url>//404.html</url>
      <content type="html"><![CDATA[<!DOCTYPE HTMl><html><head><meta name="generator" content="Hexo 3.9.0"><title>404 | Fiat Lux.</title><!-- Favicons -->    <link rel="icon shortcut" type="image/ico" href="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/blog/img/favicon.png">    <link rel="icon" href="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/blog/img/favicon.png"><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"><link rel="stylesheet" href="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/blog/css/404/style.css" type="text/css" media="all"><link href="//fonts.googleapis.com/css?family=Strait" rel="stylesheet" type="text/css"><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"><script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false); function hideURLbar(){ window.scrollTo(0,1); } </script></head><body><div class="wrap">    <div class="banner">        <a href="/" title="Homepage"><img src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/404/images/404.gif" alt></a>    </div>    <div class="chrome404">        <div id="container"></div>        <script src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/404/js/runner.js"></script>        <script>            initRunner('#container');        </script>    </div></div>    </body></html>    ]]></content>
    </entry>
    
    <entry>
      <title>这就是我瞎搞的一个blog</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>其实很早就想写一个博客了，但是它一直只是作为一个<strong>想法</strong>而存在，完全没有去实现它的动力</p><p>直到偶然之间在知乎看到<a href="https://www.zhihu.com/people/aspwebchh/activities" target="_blank" rel="noopener">@陈大侠</a>的回答————“<a href="https://www.zhihu.com/question/273631529/answer/369383753" target="_blank" rel="noopener">写博客对程序员很重要吗？</a>“</p><p>他是这样回答的</p><blockquote><p>之前开了个公众号装逼写技术博客，更新了一段时间没人看就不写技术写一些情感、生活、旅游、吃喝玩乐的内容，反正只要能写的就都写。</p><p>后来相亲认识了一妹子，没多久就好上了，主要是那妹纸太主动了，我没守住底线，沦陷了。</p><p>问妹纸为什么主动追我，妹纸说：”你的每篇文章我都看了，字里行间感受到了正能量，应该不是那种靠不住的男人，我年纪也不小了，机会不容错过，于是就使了点套路。”</p><p>我之前一直单身，始终找不好女朋友， 对我有意思的我不喜欢，我喜欢的对我没感觉。</p><p>现在能找到个令我满意的女朋友还没费多少事我想应该有写博客一部分功劳吧。</p><p>所以我觉得写博客对程序员来说挺重要的。</p></blockquote><p>这…这尼玛还犹豫什么，然后就有了这个REPO</p><p>记录生活，分享心得。</p>]]></content>
    </entry>
    
    <entry>
      <title>友链</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/qixi/index.html"/>
      <url>/qixi/index.html</url>
      <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.9.0">    <meta http-equiv="Content-type" content="text/html; charset=utf-8">    <title>七夕快乐 | Fiat Lux.</title>        <!-- Favicons -->    <link rel="icon shortcut" type="image/ico" href="/img/favicon.png">    <link rel="icon" href="/img/favicon.png">        <link rel="stylesheet" href="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/qixi/style.css">    <link rel="stylesheet" href="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/qixi/page1.css">    <link rel="stylesheet" href="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/qixi/page2.css">    <link rel="stylesheet" href="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/qixi/page3.css">    <script type="text/javascript" src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/qixi/js/jquery-1.11.1.min.js"></script>    <script type="text/javascript" src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/qixi/js/jquery.transit.min.js"></script>    <script type="text/javascript" src="https://purefkh-blog-1256555660.cos.ap-chengdu.myqcloud.com/qixi/mainjs.js"></script></head><body>    <div id="content">        <ul class="content-wrap">            <!-- 第一副画面 -->            <li>                <div class="a_background">                    <div class="a_background_top"></div>                    <div class="a_background_middle"></div>                    <div class="a_background_botton"></div>                </div>                <!-- 云 -->                <div class="cloudArea">                    <div class="cloud cloud1"></div>                    <div class="cloud cloud2"></div>                </div>                <!-- 太阳 -->                <div id="sun"></div>            </li>            <!-- 第二副画面 -->            <li>                <!-- 背景图 -->                <div class="b_background"></div>                <div class="b_background_preload"></div>                <!-- 商店 -->                <div class="shop">                    <div class="door">                        <div class="door-left"></div>                        <div class="door-right"></div>                    </div>                    <!-- 灯 -->                    <div class="lamp"></div>                </div>                <!-- 鸟 -->                <div class="bird"></div>            </li>            <!-- 第三副画面 -->            <li>                <!-- 背景图 -->                <div class="c_background">                    <div class="c_background_top"></div>                    <div class="c_background_middle"></div>                    <div class="c_background_botton"></div>                </div>                <!-- 小女孩 -->                <div class="girl"></div>                <!-- 水波 -->                <div class="bridge-bottom">                    <div class="water">                        <div id="water1" class="water_1"></div>                        <div id="water2" class="water_2"></div>                        <div id="water3" class="water_3"></div>                        <div id="water4" class="water_4"></div>                    </div>                </div>                <!-- 星星 -->                <ul class="stars">                    <li class="stars1"></li>                    <li class="stars2"></li>                    <li class="stars3"></li>                    <li class="stars4"></li>                    <li class="stars5"></li>                    <li class="stars6"></li>                    <li class="stars7"></li>                    <li class="stars8"></li>                    <li class="stars9"></li>                    <li class="stars10"></li>                </ul>                <!-- logo图 -->                <div class="logo"></div>            </li>        </ul>        <!-- 飘花 -->        <div id="snowflake"></div>        <!-- 小孩 -->        <div id="boy" class="charector slowWalk"></div>    </div></body></html>]]></content>
    </entry>
    
  
</search>
